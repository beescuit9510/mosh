/* Layout
    CSS Box model
    Sizing elements
    Overflowing
    Measurement units
    Positioning
    Floating elements
    FlexBox & Grid layouts
    Media queries */

/* CSS Box model
    margin collabsing 
    use margin to seperate elements
    use padding to add space 
    between the border and content area of an element 
*/

.p {
	margin: 20px; /*trbl vertical horizontal */
	padding: 0;
}

/* Sizing elements 
    1. the width and height properties are applied to content box
    2. any padding, border will increase the size of the visible box

    3. box-sizing: border-box;
    the size of width and height will be applied to be the border box.
    use universal selector to set Box-sixing:border-box;

    4. width, height properties are only applied to Block level elements such as div
    display: inline-block;
    no taking up all the one line like block but having dimension
    to have no space between inline-block elements 
    put em next to each other in html ex) <span></span><span></span>

    */
/* 
*/
*,
*::before,
*::after {
	/* box-sizing: border-box; */
}
.box::before {
	content: 'hello';
}
div.box {
	width: 100px;
	height: 100px;
	background-color: gold;
}
span.box {
	width: 100px;
	height: 100px;
	background-color: gold;
	display: inline-block;
}

/* Overflow */

.overflow-box {
	border: 3px solid gold;
	width: 150px;
	height: 150px;
	overflow: hidden auto;
	/* overflow-x: ; */
	/* overflow-y: ; */
}

/* Measurement Unit
    Absolute
    px

    relative
    % : relative to the size of the container
    vw vh : relative to the viewpoint
    em : relative to 10 x the font size of the current element
    rem : relative to 10 x the font size of the root element
*/

html {
	/* 62.5% 0f 16px = 10px */
	font-size: 62.5%;
}
body {
	/* margin: 0; */
}
div.measurement-box {
	width: 100px;
	height: 100px;
	width: 50%; /* 50% of the width of the parent element*/
	height: 100vh;
	/*size element according to width or height of the viewpoint
        when resize the browser the box size also resizes
        50% of the width of the viewpoint
    */

	/* font-size: 20px; */
	width: 10em; /*10 x the font size of the current element*/
	/* this element has no font-size so its going to inherit from
    HTML and all browser has default HTML fontsize 0f 16px */
	width: 15rem; /*10 x the font size of the root element*/
	/* font-size: 62.5%; == 10 px makes calculation easier */
	background-color: gold;
	border-top: 3px solid orange;
}

/* positioning 
    relative : relative to the elements' normal position
    ab solute : relative to the parent (position: relative)
    fixed : relative to viewpoint
*/

.positioning-boxes {
	border: 3px solid lightgray;
	/* position: relative; */
}

.positioning-box {
	width: 5rem;
	height: 5rem;
}
.box-one {
	background-color: gold;
}
.box-two {
	background-color: tomato;
	/* position: relative;  */
	/*position element relative to the original (static) position*/
	/* z-index: -1; */
	/* the higher number the higher that the element will move up the Zed axis */

	position: absolute;
	/* that element is removed from the normal flow of the paeg
    which means from the parents point of view, that element dosen't exist
    it's on a seperate layer. */
	top: 0;
	left: 2rem;
	right: 2rem;
	width: auto;
}
.box-third {
	background-color: dodgerblue;
}



/* floating 
    parent elements don't see floated elements
    parent collapsing, have to clear floats after
    
    shouldnt use floats for layout anymore
    use Flexbox and grid
    
*/

.avatar {
    width: 5rem;
    height: 5rem;
    background-color: gold;
    float: left;
    margin-right: 0.5rem;
}
.tweet {
    border: 3px solid lightgray;
}


/* 1. add an empty div to clear the float property */
.clear {
	/* clear: both; */
}

/* 2. use Pseudo-elements ::after  */
/* .tweet::after,  */
.clearfix::after{
    content: ''; /* No content */
    display: block; /* ::after is by default an inline element */
    clear: both;
}

/* 3. use oveflow property */
.tweet{
    overflow: auto; 
    /*depending on how we lay things out it gets scroll bars*/
    overflow: hidden;
    /* content may get clipped */
}




/* Flexible Box Layout (FlexBox)
    used for laying out elements in one direction

    AXES
    Main (primary)
    Cross (secondary)

    Direction:Row
    Main horizontal
    Cross vertical

    Direction:Column
    Cross horizontal
    Main vertical

    aligning

    properties for flex container
    justify-content : along the main axis
    align-items : along the cross axis
    align-content : use when to position several lines 

    properties for flex item


    sizing items : should be applied on flex item 
    flex-basis (the initial size of a flex item)
    flex-grow (the growth factor)
    flex-shrink (the shrink factor)
    flex shorthand for the above three properties
*/

.container{
    border: 3px solid lightgray;
    display: flex;
    flex-direction: row;
    height: 90vh;
    justify-content: center;
    align-items: center;
    /* default behavior of flex container : 
    when elements do not fit in one line
    they get smaller to fit in one line 
    flex-wrap: nowrap;
    */
    /* flex-wrap: wrap; */
    /* align-content: flex-start; */
}

.flexbox-box{
    width: 5rem;
    height: 5rem;
    background-color: gold;
    margin: 1rem;

    flex-basis: 5rem;
    /*the direction we set to is the flex basis translate to 
    row == width
    column == height
    */
    flex-grow: 1;
    /* allow items to grow and take up the space available */
    /* browser is going to take up the entire available space 
    divided by four slices then
    allocate two slices to a, one slice to b and c */
    
    flex-basis: 25rem;
    flex-shrink: 1;

    flex: 1 1 15rem; 
    /*growth factor , flex shrink - flex basis*/
    /*growth factor , flex shrink,  flex basis*/
}

.flexbox-box-one{
    /* flex-basis: 5rem; */
    /* align-self: flex-end; */
    /* justify-self: flex-start; */
    flex-grow: 2;
    flex-shrink: 0;
}